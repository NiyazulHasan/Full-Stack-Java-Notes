Types of Communications
=================================
We can communicate to servlet program in three ways.

1)Browser to servlet communication

2)HTML to servlet communication

3)Servlet to servlet communication 

In browser to servlet communication, we need to type our request url in browser address bar.But typing request url in browser address bar is quite complex.

To overcome this limitation we need to use HTML to  servlet communication.

We can give the request to servlet program by using HTML based hyperlinks or form pages.

The request which is generated using hyperlink does not carry the data.

The request which is generated by using form page will carry the data.

In html based hyperlink to servlet communication we need to type our request url
as href url.
ex:
	<a href="http://localhost:2525/DateApp/test"> clickME </a>  


In html based form page to servlet communication we need to type our request url 
as action url.
ex:
	<form action="http://localhost:2525/DateApp/test">
		-
		-	
	</form>


Example application on HTML based hyperlink to servlet communication
======================================================================

Diagram: servlet3.1

Deployment Directory structure
-------------------------------
WishApp
|
|-----Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---WishSrv.java
|
|-----Web Content
	|
	|---index.html 
	|
	|---WEB-INF
		|
		|---web.xml 

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

It is never recommanded to extends servlet class with GenericServlet class because it will not give features of HTTP protocol.

It is always recommanded to extends servlet class with HttpServlet class because it will give features of HTTP protocol.


index.html
----------

<center>
	<h1>
		<a href="test"> clickMe </a>
	</h1>
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>WishSrv</servlet-name>
  	<servlet-class>com.ihub.www.WishSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>WishSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping> 
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
  
</web-app>

WishSrv.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Calendar;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class WishSrv extends HttpServlet
{
	public void service(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		Calendar c=Calendar.getInstance();
		int h=c.get(Calendar.HOUR_OF_DAY);
		
		if(h<12)
			pw.println("<center><h1>Good Morning</h1></center>");
		else if(h<16)
			pw.println("<center><h1>Good Afternoon</h1></center>");
		else if(h<20)
			pw.println("<center><h1>Good Evening</h1></center>");
		else
			pw.println("<center><h1>Good Night</h1></center>");
		
		pw.close();
	}
}

Request url
-----------
	http://localhost:2525/WishApp

Example application on HTML based form page to servlet communication
=====================================================================

Diagram: servlet3.2

Deployment Directory structure
-------------------------------
VoteApp
|
|-----Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---VoteSrv.java
|
|-----Web Content
	|
	|---form.html 
	|
	|---WEB-INF
		|
		|---web.xml 

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

We can give the request to servlet program in two methodologies.

1)GET methodology
----------------
	It will carry limited amount of data.

2)POST methodology 
----------------
	It will carry unlimited amount of data.

While working with HttpServlet class , it is never recommanded to use service(-,-) method because it is not designed according to HTTP protocol.

It is always recommanded to use doXxx(-,-) method because they designed according to HTTP protocol.

We have seven doXxx(-,-) methods , they are.

1)doGet(-,-)
2)doPost(-,-)
3)doPut(-,-)
4)doDelete(-,-)
5)doTrace()
6)doHead(-,-)
7)doOption(-,-)


prototype of doXxx(-,-) methods
--------------------------------
protected void doGet(HttpServletRequest req,HttpServletResponse res)throws 					ServletException,IOException
{
}


form.html
---------

<form action="test" method="GET">
	Name :<input type="text" name="t1"/> <br>
	Age : <input type="text" name="t2"/> <br>
	<input type="submit" value="submit"/>
</form>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>VoteSrv</servlet-name>
  	<servlet-class>com.ihub.www.VoteSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>VoteSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

VoteSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class VoteSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//read form data
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		
		//converting string age to int age
		int age=Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1><font color='red'>"+name+" U r not eligible to vote</font></h1></center>");
		else
			pw.println("<center><h1><font color='green'>"+name+" U r eligible to vote</font></h1></center>");
	
		pw.close();
	}
}


Request url
-----------
	http://localhost:2525/VoteApp/

HTML to Servlet to Database Communication
========================================

Diagram: servlet3.3


Deployment Directory structure
-------------------------------
DBApp
|
|-----Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---DBSrv.java
|
|-----Web Content
	|
	|---form.html 
	|
	|---WEB-INF
		|
		|---web.xml 
		|	
		|-------lib
			|
			|---ojdbc14.jar

Note:
------
In above application we need to add "servlet-api.jar" and "ojdbc14.jar" file in project build path.

We need to add "ojdbc14.jar" file in "Web content/WEB-INF/lib" folder seperately.


form.html
--------

<form action="test" method="GET">

	No : <input type="text" name="t1"/> <br>
	
	Name : <input type="text" name="t2"/> <br>
	
	Address: <input type="text" name="t3"/> <br>
	
	<input type="submit" value="submit"/>
	
</form>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 <welcome-file-list>
 	<welcome-file>form.html</welcome-file> 
 </welcome-file-list>
 
 <servlet>
 	<servlet-name>DBSrv</servlet-name>
 	<servlet-class>com.ihub.www.DBSrv</servlet-class>
 </servlet>
 
 <servlet-mapping>
 	<servlet-name>DBSrv</servlet-name>
 	<url-pattern>/test</url-pattern>
 </servlet-mapping>
 
 
</web-app>

DBSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DBSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data
		String sno=req.getParameter("t1");
		int no=Integer.parseInt(sno);
		
		String name=req.getParameter("t2");
		String add=req.getParameter("t3");
		
		Connection con=null;
		PreparedStatement ps=null;
		String qry=null;
		int result=0;
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			qry="insert into student values(?,?,?)";
			ps=con.prepareStatement(qry);
			//set the values
			ps.setInt(1,no);
			ps.setString(2,name);
			ps.setString(3,add);
			
			//execute
			result=ps.executeUpdate();
			if(result==0)
				pw.println("<center><h1>Record not inserted</h1></center>");
			else
				pw.println("<center><h1>Record inserted</h1></center>");
			
			ps.close();
			con.close();
		}
		catch(Exception e)
		{
			pw.println(e);
		}
	}
}

Request url
-----------
	http://localhost:2525/DBApp/



























































































































